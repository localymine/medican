//@brand-color
//@accent-1-color
//@accent-2-color


@star-rating-color:       #ffaa00;

@lighten: 1%;
@white-darker:            lighten(overlay(#e5e5e5, @brand-color), @lighten);
@white-dark:              lighten(overlay(#f0f0f0, @brand-color), @lighten);
@white:                   lighten(overlay(#f5f5f5, @brand-color), @lighten);
@white-light:             lighten(overlay(#f8f8f8, @brand-color), @lighten);
@white-lighter:           #ffffff;


@gray-darker:            #999;
@gray-dark:              #aaa;
@gray:                   #bbb;
@gray-light:             #ccc;
@gray-lighter:           #ddd;


@black-darker:            #000;
@black-dark:              #222;
@black:                   #333;
@black-light:             #666;
@black-lighter:           #888;


@font-size-small:         11px;
@font-size-base:          15px;
@font-size-large:         18px;


@menu-height:   110px;
@menu-item-v-padding:   13px;
@menu-item-h-padding: 20px;

@secondary-menu-height:   33px;
@secondary-menu-item-v-padding:   0px;
@secondary-menu-item-h-padding: 15px;

@input-height: 40px;
@input-padding: 10px;


// 2009 flexbox syntax https://www.w3.org/TR/2009/WD-css3-flexbox-20090723/
.vendor(@property, @value) when (@property = display) and (@value = flex) {
    display: -webkit-box;
}
.vendor(@property, @value) when (@property = display) and (@value = inline-flex) {
    display: -webkit-inline-box;
}
.vendor(@property, @value) when (@property = align-items)  {
    -webkit-box-align: @value;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-start) {
    -webkit-box-align: start;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-end) {
    -webkit-box-align: end;
}

.vendor(@property, @value) when (@property = justify-content)  {
    -webkit-box-pack: @value;
    -moz-box-pack: @value;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = flex-start)  {
    -webkit-box-pack: start;
    -moz-box-pack: start;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = flex-end)  {
    -webkit-box-pack: end;
    -moz-box-pack: end;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = space-between)  {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;    
}

.vendor(@property, @value) when (@property = order) {
    -webkit-box-ordinal-group: @value + 1;
    -moz-box-ordinal-group: @value + 1;
    -ms-box-ordinal-group: @value + 1;
    -o-box-ordinal-group: @value + 1;
    box-ordinal-group: @value + 1;    
}

.vendor(@property, @value) when (@property = flex-direction) and (@value = row)  {
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    -ms-box-orient: horizontal;
    -o-box-orient: horizontal;
    box-orient: horizontal;   
}
.vendor(@property, @value) when (@property = flex-direction) and (@value = row-reverse)  {
    -webkit-box-orient: horizontal;
    -moz-box-orient: horizontal;
    -ms-box-orient: horizontal;
    -o-box-orient: horizontal;
    box-orient: horizontal;
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    -ms-box-direction: reverse;
    -o-box-direction: reverse;
    box-direction: reverse;
}
.vendor(@property, @value) when (@property = flex-direction) and (@value = column)  {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-box-orient: vertical;
    -o-box-orient: vertical;
    box-orient: vertical;
}
.vendor(@property, @value) when (@property = flex-direction) and (@value = column-reverse)  {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    -ms-box-orient: vertical;
    -o-box-orient: vertical;
    box-orient: vertical;
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    -ms-box-direction: reverse;
    -o-box-direction: reverse;
    box-direction: reverse;
}

.vendor(@property, @value) when (@property = flex-wrap) and (@value = wrap) {
    -webkit-lines: multiple;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    -ms-box-lines: multiple;
    -o-box-lines: multiple;
    box-lines: multiple;
}

.vendor(@property, @value) when (@property = flex-wrap) and (@value = wrap-reverse) {
    -webkit-lines: multiple;
    -webkit-box-lines: multiple;
    -moz-box-lines: multiple;
    -ms-box-lines: multiple;
    -o-box-lines: multiple;
    box-lines: multiple;
    -webkit-box-direction: reverse;
    -moz-box-direction: reverse;
    -ms-box-direction: reverse;
    -o-box-direction: reverse;
    box-direction: reverse;
}

.vendor(@property, @value) when (@property = flex-wrap) and (@value = nowrap) {    
    -webkit-lines: single;
    -webkit-box-lines: single;
    -moz-box-lines: single;
    -ms-box-lines: single;
    -o-box-lines: single;
    box-lines: single;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-start) {    
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-box-align: start;
    -o-box-align: start;
    box-align: start;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-end) { 
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-box-align: end;
    -o-box-align: end;
    box-align: end;
}

.vendor(@property, @value) when (@property = align-items) and (@value = center), (@property = align-items) and (@value = baseline), (@property = align-items) and (@value = stretch){
    -webkit-box-align: @value;
    -moz-box-align: @value;
    -ms-box-align: @value;
    -o-box-align: @value;
    box-align: @value;
}

.vendor(@property, @value) when (@property = flex-grow)  {
    -webkit-box-flex: @value;
}


// 2012 flexbox syntax https://www.w3.org/TR/2012/WD-css3-flexbox-20120322/
.vendor(@property, @value) when (@property = display) and (@value = flex) {
    display: -ms-flexbox;
}

.vendor(@property, @value) when (@property = align-items)  {
    -ms-flex-align: @value;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-start) {
    -ms-flex-align: start;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-end) {
    -ms-flex-align: end;
}

.vendor(@property, @value) when (@property = align-content) and (@value = flex-start)  {
    -ms-flex-line-pack: start;
}

.vendor(@property, @value) when (@property = align-content) and (@value = flex-end)  {
    -ms-flex-line-pack: end;
}

.vendor(@property, @value) when (@property = align-content) and (@value = space-between)  {
    -ms-flex-line-pack: justify;
}

.vendor(@property, @value) when (@property = align-content) and (@value = space-around)  {
    -ms-flex-line-pack: distribute;
}

.vendor(@property, @value) when (@property = align-content) and (@value = center), (@property = align-content) and (@value = stretch)  {
    -ms-flex-line-pack: @value;
}

.vendor(@property, @value) when (@property = justify-content)  {
    -ms-flex-pack: @value;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = flex-start)  {
    -ms-flex-pack: start;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = flex-end)  {
    -ms-flex-pack: end;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = space-between)  {
    -ms-flex-pack: justify;
}

.vendor(@property, @value) when (@property = justify-content) and (@value = space-around)  {
    -ms-flex-pack: distribute;
}

.vendor(@property, @value) when (@property = order) {
    -ms-flex-order: @value;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-start) { 
    -ms-flex-align: start;
}

.vendor(@property, @value) when (@property = align-items) and (@value = flex-end) { 
    -ms-flex-align: end;
}

.vendor(@property, @value) when (@property = align-items) and (@value = center), (@property = align-items) and (@value = baseline), (@property = align-items) and (@value = stretch){
    -ms-flex-align: @value;
}

.vendor(@property, @value) when (@property = align-self) and (@value = flex-start) { 
    -ms-flex-item-align: start;
    flex-item-align: start;
}

.vendor(@property, @value) when (@property = align-self) and (@value = flex-end) {
    -ms-flex-item-align: end;
    flex-item-align: end;
}

.vendor(@property, @value) when (@property = align-self) and (@value = auto), (@property = align-self) and (@value = center), (@property = align-items) and (@value = baseline), (@property = align-items) and (@value = stretch){
    -ms-flex-item-align: @value;
    flex-item-align: @value;
}


.vendor(@property, @value) when (isstring(@value) = false) {
    -webkit-@{property}: @value;
    -khtml-@{property}: @value;
    -moz-@{property}: @value;
    -ms-@{property}: @value;
    @{property}: @value;
}

.vendor(@property, @value) when (isstring(@value) = true) {
    -webkit-@{property}: e(@value);
    -khtml-@{property}: e(@value);
    -moz-@{property}: e(@value);
    -ms-@{property}: e(@value);
    @{property}: e(@value);
}


.accent-font-style() {    
    font-weight: 300;
    font-size: @font-size-small;
    letter-spacing: 2px;
    text-transform: uppercase;
}

.more-style(@color, @bg_color, @offset) {
    background-color: @bg_color;    
    color: @color;
    font-size: @font-size-small;
    letter-spacing: 1px;
    font-weight: 400;
    padding: 0 @offset;
    line-height: @input-height * 0.7;
    .vendor(box-shadow, 1px 1px 2px fade(@black-darker, 5%));
}


.more-button(@color, @bg_color, @offset) {
    background-color: @bg_color;    
    color: @color;
    outline: 0;
    outline-offset: 0;
    display: inline-block;
    width: auto;
    box-sizing: border-box;
    text-align: center;
    font-size: @font-size-small;
    letter-spacing: 1px;
    font-weight: 400;
    white-space: nowrap;
    vertical-align: middle;
    .vendor(touch-action, manipulation);
    cursor: pointer;
    .vendor(user-select, none);
    background-image: none;
    margin: 0;
    text-decoration: none;
    text-transform: none;
    .vendor(box-shadow, 1px 1px 2px fade(@black-darker, 5%));
    padding-left: @offset;
    border: none;
    position: relative;
    line-height: @input-height * 0.7;
    &:focus {
        outline: 0;
        outline-offset: 0;
    }
    &::after {
        content: "\f178";
        font-family: FontAwesome;
        padding: 0 @offset;
        margin-left: @offset;
        display: inline-block;
        border-left: 1px solid @white-dark;
    }
}

.big-button(@color, @bg_color) {
    background-color: @bg_color;    
    color: @color;
    outline: 0;
    outline-offset: 0;
    display: inline-block;
    width: auto;
    box-sizing: border-box;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    .vendor(touch-action, manipulation);
    cursor: pointer;
    .vendor(user-select, none);
    background-image: none;
    margin: 0;
    text-decoration: none;
    box-shadow: none;
    padding: 0 50px !important;
    border: none;
    border-radius: 4px !important;
    position: relative;
    line-height: @input-height * 1.5;
    &:focus {
        outline: 0;
        outline-offset: 0;
    }
}

.button(@color, @bg_color) {
    .accent-font-style();
    background-color: @bg_color;    
    color: @color;
    outline: 0;
    outline-offset: 0;
    display: inline-block;
    width: auto;
    box-sizing: border-box;
    text-align: center;
    white-space: nowrap;
    vertical-align: middle;
    .vendor(touch-action, manipulation);
    cursor: pointer;
    .vendor(user-select, none);
    background-image: none;
    margin: 0;
    text-decoration: none;
    box-shadow: none;
    padding: 0 30px;
    border: none;
    border-radius: 0 !important;
    position: relative;
    line-height: @input-height;
    &:focus {
        outline: 0;
        outline-offset: 0;
    }
}

.solid-hover-button(@color, @bg_color) {
    .button(@color, transparent);
    border: 1px solid @color;    
    line-height: @input-height - 2px;
    .vendor(transition, all .3s);
    &:hover, &:focus {
        color: @white-lighter;
        background-color: @bg_color;
        border: 1px solid @bg_color;
    }
}

.hover-button(@color, @bg_color) {
    .button(@color, transparent);
    border: 1px solid @color;
    line-height: @input-height - 2px;
    .vendor(transition, all .3s);
    &:hover, &:focus {
        color: @bg_color;
        border: 1px solid @bg_color;
    }
}

.container-width() {
    @media (min-width: 786px) {
        max-width: 750px !important;
    }

    @media (min-width: 992px) {
        max-width: 970px !important;
    }

    @media (min-width: 1200px) {
        max-width: 1170px !important;
    }
}

.container() {
    margin-left: auto !important;
    margin-right: auto !important;
    box-sizing: border-box;    
    @media (max-width: 786px) {
        padding-right: 15px !important;
        padding-left: 15px !important;
    }
    .container-width();
}

.table(@padding) {
    border-spacing: 0;
    border-width: 1px 0 0 1px;    
    table-layout: auto;
    width: 100%;
    caption {
        margin-bottom: 20px;
        color: @brand-color;
        line-height: 1;
    }
    thead {
        background-color: @white;
        text-transform: uppercase;
        font-family: 'Droid Serif', sans-serif;
        color: @black-light;
        tr {
            th, td {
                padding: @padding;
                border: 1px solid @white-dark;
            }
        }
    }
    tbody {
        tr {
            th, td {
                padding: @padding;
                border: 1px solid @white-dark;
                a {                                
                    color: @brand-color;
                }
            }
        }
    }
    tfoot {
        tr {
            th, td {
                padding: @padding;
                border: 1px solid @white-dark;
                a {
                    color: @brand-color;
                }
            }
        }
    }
}

.social-bg-colors() {
    &.fa-facebook {
        background-color: #469;
        &:hover {
            background-color: #6c8dbe;
        }
        &:active {
            background-color: #8fa8cd;
        }  
    }
    &.fa-twitter {
        background-color: #09f;
        &:hover {
            background-color: #4db8ff;
        }
        &:active {
            background-color: #80ccff;
        }
    }
    &.fa-pinterest {
        background-color: #c22;
        &:hover {
            background-color: #e35757;
        }
        &:active {
            background-color: #ea8383;
        }                        
    }
    &.fa-linkedin {
        background-color: #07d;
        &:hover {
            background-color: #2b9dff;
        }
        &:active {
            background-color: #5eb4ff;
        }                        
    }
    &.fa-google-plus {
        background-color: #d43;
        &:hover {
            background-color: #e88075;
        }
        &:active {
            background-color: #efa8a0;
        }                        
    }

}


.control() {
    font-family: 'Roboto', sans-serif;
    display: block;
    width: 100%;
    height: @input-height;
    border: 1px solid @white-darker;
    border-radius: 0;
    background-color: @white-lighter;
    background-image: none;
    box-shadow: none;
    color: @black-darker;
    box-sizing: border-box;
    padding: @input-padding;
    font-weight: 300;
    font-size: @font-size-small;
    letter-spacing: 1px;
    &:focus {
        .vendor(box-shadow, none);
        .vendor(outline, none);
    }
}

.placeholder(@property, @value) when (isstring(@value) = false) {
    &:placeholder {
        @{property}: @value;
    }
    &::placeholder {
        @{property}: @value;
    }
    &::-webkit-input-placeholder {
        @{property}: @value;
    }
    &::-moz-placeholder {
        @{property}: @value;
    }
    &:-moz-placeholder {
        @{property}: @value;
    }
    &:-ms-input-placeholder {
        @{property}: @value;
    }     
}

.placeholder(@property, @value) when (isstring(@value) = true) {
    &:placeholder {
        @{property}: e(@value);
    }
    &::placeholder {
        @{property}: e(@value);
    }
    &::-webkit-input-placeholder {
        @{property}: e(@value);
    }
    &::-moz-placeholder {
        @{property}: e(@value);
    }
    &:-moz-placeholder {
        @{property}: e(@value);
    }
    &:-ms-input-placeholder {
        @{property}: e(@value);
    }     
}